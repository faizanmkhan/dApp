{
  "version": 3,
  "sources": ["../../@worldcoin/idkit-core/build/lib/backend.js", "../../@worldcoin/minikit-js/build/index.js"],
  "sourcesContent": ["import {\n  hashToField\n} from \"../chunk-HZ2SQA5V.js\";\n\n// src/lib/backend.ts\nimport { isBrowser } from \"browser-or-node\";\nasync function verifyCloudProof(proof, app_id, action, signal, endpoint, headers) {\n  if (isBrowser) {\n    throw new Error(\"verifyCloudProof can only be used in the backend.\");\n  }\n  const response = await fetch(endpoint ?? `https://developer.worldcoin.org/api/v2/verify/${app_id}`, {\n    method: \"POST\",\n    headers: {\n      ...headers ?? {},\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      ...proof,\n      action,\n      signal_hash: hashToField(signal ?? \"\").digest\n    })\n  });\n  if (response.ok) {\n    return { success: true };\n  } else {\n    return { success: false, ...await response.json() };\n  }\n}\nexport {\n  verifyCloudProof\n};\n", "import {\n  AppErrorCodes,\n  Command,\n  GetPermissionsErrorCodes,\n  GetPermissionsErrorMessage,\n  MiniKit,\n  MiniKitInstallErrorCodes,\n  MiniKitInstallErrorMessage,\n  Network,\n  PaymentErrorCodes,\n  PaymentErrorMessage,\n  PaymentValidationErrors,\n  Permission,\n  RequestPermissionErrorCodes,\n  RequestPermissionErrorMessage,\n  ResponseEvent,\n  SendHapticFeedbackErrorCodes,\n  SendHapticFeedbackErrorMessage,\n  SendTransactionErrorCodes,\n  SendTransactionErrorMessage,\n  ShareContactsErrorCodes,\n  ShareContactsErrorMessage,\n  ShareFilesErrorCodes,\n  ShareFilesErrorMessage,\n  SignMessageErrorCodes,\n  SignMessageErrorMessage,\n  SignTypedDataErrorCodes,\n  SignTypedDataErrorMessage,\n  TokenDecimals,\n  Tokens,\n  VerificationErrorMessage,\n  WalletAuthErrorCodes,\n  WalletAuthErrorMessage,\n  parseSiweMessage,\n  tokenToDecimals,\n  verifySiweMessage\n} from \"./chunk-VOZXVH3R.js\";\n\n// index.ts\nimport { VerificationLevel } from \"@worldcoin/idkit-core\";\nimport {\n  verifyCloudProof\n} from \"@worldcoin/idkit-core/backend\";\n\n// helpers/address-book/index.ts\nimport { createPublicClient, http } from \"viem\";\nimport { worldchain } from \"viem/chains\";\nvar worldIdAddressBookContractAddress = \"0x57b930D551e677CC36e2fA036Ae2fe8FdaE0330D\";\nvar addressVerifiedUntilAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\"\n      }\n    ],\n    name: \"addressVerifiedUntil\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\"\n      }\n    ],\n    stateMutability: \"view\",\n    type: \"function\"\n  }\n];\nvar getIsUserVerified = async (walletAddress, rpcUrl) => {\n  const publicClient = createPublicClient({\n    chain: worldchain,\n    transport: http(\n      rpcUrl || \"https://worldchain-mainnet.g.alchemy.com/public\"\n    )\n  });\n  try {\n    const verifiedUntilResponse = await publicClient.readContract({\n      address: worldIdAddressBookContractAddress,\n      abi: addressVerifiedUntilAbi,\n      functionName: \"addressVerifiedUntil\",\n      args: [walletAddress]\n    });\n    const verifiedUntil = Number(verifiedUntilResponse.toString());\n    if (!Number.isFinite(verifiedUntil)) {\n      console.warn(\"Invalid verifiedUntil value:\", verifiedUntil);\n      return false;\n    }\n    const currentTime = Math.floor(Date.now() / 1e3);\n    return verifiedUntil > currentTime;\n  } catch (error) {\n    console.error(\"Error verifying user:\", error);\n    return false;\n  }\n};\nexport {\n  Command,\n  GetPermissionsErrorCodes,\n  GetPermissionsErrorMessage,\n  MiniKit,\n  MiniKitInstallErrorCodes,\n  MiniKitInstallErrorMessage,\n  Network,\n  PaymentErrorCodes,\n  PaymentErrorMessage,\n  PaymentValidationErrors,\n  Permission,\n  RequestPermissionErrorCodes,\n  RequestPermissionErrorMessage,\n  ResponseEvent,\n  SendHapticFeedbackErrorCodes,\n  SendHapticFeedbackErrorMessage,\n  SendTransactionErrorCodes,\n  SendTransactionErrorMessage,\n  ShareContactsErrorCodes,\n  ShareContactsErrorMessage,\n  ShareFilesErrorCodes,\n  ShareFilesErrorMessage,\n  SignMessageErrorCodes,\n  SignMessageErrorMessage,\n  SignTypedDataErrorCodes,\n  SignTypedDataErrorMessage,\n  TokenDecimals,\n  Tokens,\n  AppErrorCodes as VerificationErrorCodes,\n  VerificationErrorMessage,\n  VerificationLevel,\n  WalletAuthErrorCodes,\n  WalletAuthErrorMessage,\n  getIsUserVerified,\n  parseSiweMessage,\n  tokenToDecimals,\n  verifyCloudProof,\n  verifySiweMessage\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,eAAe,iBAAiB,OAAO,QAAQ,QAAQ,QAAQ,UAAU,SAAS;AAChF,MAAI,WAAW;AACb,UAAM,IAAI,MAAM,mDAAmD;AAAA,EACrE;AACA,QAAM,WAAW,MAAM,MAAM,YAAY,iDAAiD,MAAM,IAAI;AAAA,IAClG,QAAQ;AAAA,IACR,SAAS;AAAA,MACP,GAAG,WAAW,CAAC;AAAA,MACf,gBAAgB;AAAA,IAClB;AAAA,IACA,MAAM,KAAK,UAAU;AAAA,MACnB,GAAG;AAAA,MACH;AAAA,MACA,aAAa,YAAY,UAAU,EAAE,EAAE;AAAA,IACzC,CAAC;AAAA,EACH,CAAC;AACD,MAAI,SAAS,IAAI;AACf,WAAO,EAAE,SAAS,KAAK;AAAA,EACzB,OAAO;AACL,WAAO,EAAE,SAAS,OAAO,GAAG,MAAM,SAAS,KAAK,EAAE;AAAA,EACpD;AACF;;;ACoBA,IAAI,oCAAoC;AACxC,IAAI,0BAA0B;AAAA,EAC5B;AAAA,IACE,QAAQ;AAAA,MACN;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,MACP;AAAA,QACE,cAAc;AAAA,QACd,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AACF;AACA,IAAI,oBAAoB,OAAO,eAAe,WAAW;AACvD,QAAM,eAAe,mBAAmB;AAAA,IACtC,OAAO;AAAA,IACP,WAAW;AAAA,MACT,UAAU;AAAA,IACZ;AAAA,EACF,CAAC;AACD,MAAI;AACF,UAAM,wBAAwB,MAAM,aAAa,aAAa;AAAA,MAC5D,SAAS;AAAA,MACT,KAAK;AAAA,MACL,cAAc;AAAA,MACd,MAAM,CAAC,aAAa;AAAA,IACtB,CAAC;AACD,UAAM,gBAAgB,OAAO,sBAAsB,SAAS,CAAC;AAC7D,QAAI,CAAC,OAAO,SAAS,aAAa,GAAG;AACnC,cAAQ,KAAK,gCAAgC,aAAa;AAC1D,aAAO;AAAA,IACT;AACA,UAAM,cAAc,KAAK,MAAM,KAAK,IAAI,IAAI,GAAG;AAC/C,WAAO,gBAAgB;AAAA,EACzB,SAAS,OAAO;AACd,YAAQ,MAAM,yBAAyB,KAAK;AAC5C,WAAO;AAAA,EACT;AACF;",
  "names": []
}
