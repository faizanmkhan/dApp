import {
  AppErrorCodes,
  Command,
  GetPermissionsErrorCodes,
  GetPermissionsErrorMessage,
  MiniKit,
  MiniKitInstallErrorCodes,
  MiniKitInstallErrorMessage,
  Network,
  PaymentErrorCodes,
  PaymentErrorMessage,
  PaymentValidationErrors,
  Permission,
  RequestPermissionErrorCodes,
  RequestPermissionErrorMessage,
  ResponseEvent,
  SendHapticFeedbackErrorCodes,
  SendHapticFeedbackErrorMessage,
  SendTransactionErrorCodes,
  SendTransactionErrorMessage,
  ShareContactsErrorCodes,
  ShareContactsErrorMessage,
  ShareFilesErrorCodes,
  ShareFilesErrorMessage,
  SignMessageErrorCodes,
  SignMessageErrorMessage,
  SignTypedDataErrorCodes,
  SignTypedDataErrorMessage,
  TokenDecimals,
  Tokens,
  VerificationErrorMessage,
  VerificationLevel,
  WalletAuthErrorCodes,
  WalletAuthErrorMessage,
  createPublicClient,
  hashToField,
  http,
  isBrowser,
  parseSiweMessage,
  tokenToDecimals,
  verifySiweMessage,
  worldchain
} from "./chunk-7D5DLCEI.js";
import "./chunk-7I56DLTI.js";
import "./chunk-X46LM6YQ.js";
import "./chunk-YACDPAZR.js";
import "./chunk-3TFVT2CW.js";
import "./chunk-4MBMRILA.js";

// node_modules/@worldcoin/idkit-core/build/lib/backend.js
async function verifyCloudProof(proof, app_id, action, signal, endpoint, headers) {
  if (isBrowser) {
    throw new Error("verifyCloudProof can only be used in the backend.");
  }
  const response = await fetch(endpoint ?? `https://developer.worldcoin.org/api/v2/verify/${app_id}`, {
    method: "POST",
    headers: {
      ...headers ?? {},
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      ...proof,
      action,
      signal_hash: hashToField(signal ?? "").digest
    })
  });
  if (response.ok) {
    return { success: true };
  } else {
    return { success: false, ...await response.json() };
  }
}

// node_modules/@worldcoin/minikit-js/build/index.js
var worldIdAddressBookContractAddress = "0x57b930D551e677CC36e2fA036Ae2fe8FdaE0330D";
var addressVerifiedUntilAbi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "addressVerifiedUntil",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var getIsUserVerified = async (walletAddress, rpcUrl) => {
  const publicClient = createPublicClient({
    chain: worldchain,
    transport: http(
      rpcUrl || "https://worldchain-mainnet.g.alchemy.com/public"
    )
  });
  try {
    const verifiedUntilResponse = await publicClient.readContract({
      address: worldIdAddressBookContractAddress,
      abi: addressVerifiedUntilAbi,
      functionName: "addressVerifiedUntil",
      args: [walletAddress]
    });
    const verifiedUntil = Number(verifiedUntilResponse.toString());
    if (!Number.isFinite(verifiedUntil)) {
      console.warn("Invalid verifiedUntil value:", verifiedUntil);
      return false;
    }
    const currentTime = Math.floor(Date.now() / 1e3);
    return verifiedUntil > currentTime;
  } catch (error) {
    console.error("Error verifying user:", error);
    return false;
  }
};
export {
  Command,
  GetPermissionsErrorCodes,
  GetPermissionsErrorMessage,
  MiniKit,
  MiniKitInstallErrorCodes,
  MiniKitInstallErrorMessage,
  Network,
  PaymentErrorCodes,
  PaymentErrorMessage,
  PaymentValidationErrors,
  Permission,
  RequestPermissionErrorCodes,
  RequestPermissionErrorMessage,
  ResponseEvent,
  SendHapticFeedbackErrorCodes,
  SendHapticFeedbackErrorMessage,
  SendTransactionErrorCodes,
  SendTransactionErrorMessage,
  ShareContactsErrorCodes,
  ShareContactsErrorMessage,
  ShareFilesErrorCodes,
  ShareFilesErrorMessage,
  SignMessageErrorCodes,
  SignMessageErrorMessage,
  SignTypedDataErrorCodes,
  SignTypedDataErrorMessage,
  TokenDecimals,
  Tokens,
  AppErrorCodes as VerificationErrorCodes,
  VerificationErrorMessage,
  VerificationLevel,
  WalletAuthErrorCodes,
  WalletAuthErrorMessage,
  getIsUserVerified,
  parseSiweMessage,
  tokenToDecimals,
  verifyCloudProof,
  verifySiweMessage
};
//# sourceMappingURL=@worldcoin_minikit-js.js.map
