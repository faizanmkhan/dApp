{
  "version": 3,
  "sources": ["../../@worldcoin/minikit-js/build/minikit-provider.js"],
  "sourcesContent": ["\"use client\";\nimport {\n  MiniKit\n} from \"./chunk-VOZXVH3R.js\";\n\n// minikit-provider.tsx\nimport {\n  createContext,\n  useContext,\n  useEffect,\n  useState\n} from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar MiniKitContext = createContext({\n  isInstalled: false\n});\nvar MiniKitProvider = ({\n  children,\n  props\n}) => {\n  const [isInstalled, setIsInstalled] = useState(false);\n  useEffect(() => {\n    MiniKit.install(props?.appId);\n    MiniKit.commandsAsync.getPermissions().then(({ commandPayload: _, finalPayload }) => {\n      if (finalPayload.status === \"success\") {\n        MiniKit.user.permissions = {\n          notifications: finalPayload.permissions.notifications,\n          contacts: finalPayload.permissions.contacts\n        };\n      }\n    });\n    setIsInstalled(true);\n  }, [props?.appId]);\n  return /* @__PURE__ */ jsx(MiniKitContext.Provider, { value: { isInstalled }, children });\n};\nvar useMiniKit = () => {\n  const context = useContext(MiniKitContext);\n  if (context === void 0) {\n    throw new Error(\"useMiniKit must be used within a MiniKitProvider\");\n  }\n  return context;\n};\nexport {\n  MiniKitProvider,\n  useMiniKit\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAMA,mBAKO;AACP,yBAAoB;AACpB,IAAI,qBAAiB,4BAAc;AAAA,EACjC,aAAa;AACf,CAAC;AACD,IAAI,kBAAkB,CAAC;AAAA,EACrB;AAAA,EACA;AACF,MAAM;AACJ,QAAM,CAAC,aAAa,cAAc,QAAI,uBAAS,KAAK;AACpD,8BAAU,MAAM;AACd,YAAQ,QAAQ,+BAAO,KAAK;AAC5B,YAAQ,cAAc,eAAe,EAAE,KAAK,CAAC,EAAE,gBAAgB,GAAG,aAAa,MAAM;AACnF,UAAI,aAAa,WAAW,WAAW;AACrC,gBAAQ,KAAK,cAAc;AAAA,UACzB,eAAe,aAAa,YAAY;AAAA,UACxC,UAAU,aAAa,YAAY;AAAA,QACrC;AAAA,MACF;AAAA,IACF,CAAC;AACD,mBAAe,IAAI;AAAA,EACrB,GAAG,CAAC,+BAAO,KAAK,CAAC;AACjB,aAAuB,wBAAI,eAAe,UAAU,EAAE,OAAO,EAAE,YAAY,GAAG,SAAS,CAAC;AAC1F;AACA,IAAI,aAAa,MAAM;AACrB,QAAM,cAAU,yBAAW,cAAc;AACzC,MAAI,YAAY,QAAQ;AACtB,UAAM,IAAI,MAAM,kDAAkD;AAAA,EACpE;AACA,SAAO;AACT;",
  "names": []
}
