"use client";
import {
  MiniKit
} from "./chunk-7D5DLCEI.js";
import "./chunk-7I56DLTI.js";
import "./chunk-X46LM6YQ.js";
import "./chunk-YACDPAZR.js";
import {
  require_jsx_runtime
} from "./chunk-S77I6LSE.js";
import {
  require_react
} from "./chunk-3TFVT2CW.js";
import {
  __toESM
} from "./chunk-4MBMRILA.js";

// node_modules/@worldcoin/minikit-js/build/minikit-provider.js
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var MiniKitContext = (0, import_react.createContext)({
  isInstalled: false
});
var MiniKitProvider = ({
  children,
  props
}) => {
  const [isInstalled, setIsInstalled] = (0, import_react.useState)(false);
  (0, import_react.useEffect)(() => {
    MiniKit.install(props == null ? void 0 : props.appId);
    MiniKit.commandsAsync.getPermissions().then(({ commandPayload: _, finalPayload }) => {
      if (finalPayload.status === "success") {
        MiniKit.user.permissions = {
          notifications: finalPayload.permissions.notifications,
          contacts: finalPayload.permissions.contacts
        };
      }
    });
    setIsInstalled(true);
  }, [props == null ? void 0 : props.appId]);
  return (0, import_jsx_runtime.jsx)(MiniKitContext.Provider, { value: { isInstalled }, children });
};
var useMiniKit = () => {
  const context = (0, import_react.useContext)(MiniKitContext);
  if (context === void 0) {
    throw new Error("useMiniKit must be used within a MiniKitProvider");
  }
  return context;
};
export {
  MiniKitProvider,
  useMiniKit
};
//# sourceMappingURL=@worldcoin_minikit-js_minikit-provider.js.map
